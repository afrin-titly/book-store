package handler_test

import (
	"book-apis/application"
	"book-apis/domain"
	"book-apis/handler"
	"book-apis/mocks"
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetAllBooks(t *testing.T) {
	// Step 1: Define test cases
	tests := []struct {
		name           string
		mockBooks      []domain.Book
		mockError      error
		expectedStatus int
		expectedBody   interface{}
	}{
		{
			name: "Success - Multiple Books Returned",
			mockBooks: []domain.Book{
				{ID: 1, Title: "Book 1", Author: "Author 1"},
				{ID: 2, Title: "Book 2", Author: "Author 2"},
			},
			mockError:      nil,
			expectedStatus: http.StatusOK,
			expectedBody: []domain.Book{
				{ID: 1, Title: "Book 1", Author: "Author 1"},
				{ID: 2, Title: "Book 2", Author: "Author 2"},
			},
		},
		{
			name:           "Success - Empty Book List",
			mockBooks:      []domain.Book{},
			mockError:      nil,
			expectedStatus: http.StatusOK,
			expectedBody:   []domain.Book{},
		},
		{
			name:           "Failure - Internal Server Error",
			mockBooks:      nil,
			mockError:      assert.AnError,
			expectedStatus: http.StatusInternalServerError,
			expectedBody:   "Failed to fetch books\n",
		},
	}

	// Step 2: Loop through test cases
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Mock the repository
			mockRepo := new(mocks.MockBookRepository)
			mockRepo.On("GetAll").Return(tc.mockBooks, tc.mockError)

			// Create service and handler
			bookService := application.NewBookService(mockRepo)
			bookHandler := handler.NewBookHandler(bookService)

			// Prepare HTTP request
			req, err := http.NewRequest("GET", "/books", nil)
			assert.NoError(t, err)

			// Record response
			rr := httptest.NewRecorder()
			bookHandler.GetAllBooks(rr, req)

			// Assertions for status code
			assert.Equal(t, tc.expectedStatus, rr.Code)

			// Assertions for response body
			if rr.Code == http.StatusOK {
				var response []domain.Book
				err := json.NewDecoder(rr.Body).Decode(&response)
				assert.NoError(t, err)
				assert.Equal(t, tc.expectedBody, response)
			} else {
				assert.Equal(t, tc.expectedBody, rr.Body.String())
			}

			// Verify mock expectations
			mockRepo.AssertExpectations(t)
		})
	}
}
